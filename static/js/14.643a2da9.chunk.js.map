{"version":3,"sources":["utils/formatBalance.ts","utils/erc20.ts","utils/callHelpers.ts","hooks/useTokenBalance.ts","hooks/useHarvest.ts","components/UnlockButton.tsx","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","getContract","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","account","a","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","approve","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","times","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","cakeContract","cakeABI","getCakeAddress","supply","fetchTotalSupply","useBurnedBalance","setBalance","bal","fetchBalance","useTokenBalance","useWallet","ethereum","fastRefresh","res","useHarvest","farmPid","dispatch","useDispatch","useMasterchef","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","UnlockButton","props","TranslateString","useI18n","connect","reset","onPresentConnectModal","useWalletModal","onClick","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","multicall","masterChefABI","rawResults","results","index","fetchBalances","CardValue","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","color","style","lineHeight","CakeWalletBalance","cakeBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","alifePrice","usePriceCakeBusd","earning","balancesWithValue","filter","balanceType","farmWithBalance","harvestAllFarms","size","mb","src","alt","width","height","id","disabled","length","fullWidth","StyledCakeStats","Row","LifeStatsHeading","Heading","CakeStats","burnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","tokenPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","AnnouncementHeading","TwitterCard","dataSource","sourceType","screenName","chrome","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/14.643a2da9.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingReward',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({ earningsSum }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingReward',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/alife/2a.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const alifePrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"#9f0d0d\" size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/alife/2.png\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{TranslateString(544, 'ALIFE to Harvest')}</Label>\n          <CakeHarvestBalance earningsSum={earningsSum} />\n          <Label>~${(alifePrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'ALIFE in Wallet')}</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(alifePrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting ALIFE')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst LifeStatsHeading = styled(Heading)`\n  @media (max-width: 1300px) {\n    font-size: 24px !important;\n  }\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms()\n  const alifePrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n  const marketCap = alifePrice.times(circSupply)\n\n  let tokenPerBlock = 0\n  if (farms && farms[0] && farms[0].tokenPerBlock) {\n    tokenPerBlock = new BigNumber(farms[0].tokenPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <LifeStatsHeading color=\"#9f0d0d\" size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'Alife Stats')}\n        </LifeStatsHeading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New ALIFE/block')}</Text>\n          <Text bold fontSize=\"14px\">\n            {tokenPerBlock}\n          </Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n\n  const totalValue = useTotalValue()\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading color=\"#9f0d0d\" size=\"lg\" mb=\"24px\">\n          {TranslateString(999, 'Total Value Locked (TVL)')}\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n          <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\n          {/* </Heading> */}\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst AnnouncementHeading = styled(Heading)`\n  @media (max-width: 1300px) {\n    font-size: 24px !important;\n  }\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <AnnouncementHeading color=\"#9f0d0d\" size=\"xl\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </AnnouncementHeading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'VladFinance',\n          }}\n          options={{\n            height: '300',\n            chrome: 'noheader, nofooter',\n            width: '400',\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/alife/3.png');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/alife/3.png'), url('/images/alife/3b.png');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"#9f0d0d\">\n          {TranslateString(576, 'Vlad Finance')}\n        </Heading>\n        <Text>{TranslateString(578, 'Come for the Immortality. Stay for the NFTs.')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard />\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}