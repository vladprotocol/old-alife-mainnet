{"version":3,"sources":["config/constants/epic.ts","views/Epic/components/InfoRow.tsx","views/Epic/components/Image.tsx","views/Epic/utils/contracts.ts","views/Epic/contexts/NftProvider.tsx","views/Epic/components/ClaimNftModal.tsx","views/Epic/components/BurnNftModal.tsx","views/Epic/components/TransferNftModal.tsx","views/Epic/components/NftCard/index.tsx","views/Epic/components/NftGrid.tsx","views/Epic/components/NftList.tsx","views/Epic/components/NftProgressSimple.tsx","views/Epic/components/NftInfo.tsx","views/Epic/index.tsx"],"names":["EpicNftFarm","NFT","AMOUNT_TO_CLAIM","Nfts","name","metadata","description","previewImage","originalImage","fileType","blurImage","sortOrder","nftId","tokenAmount","tokenSupply","nftFarmContract","nftContract","InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","href","target","rel","getNftContract","contractOptions","nftAbi","nft","getContract","getFromWayArray","v","array","t","length","i","push","fromWei","toString","getToFloat","parseInt","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","useState","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","balanceOf","nftMap","allowMultipleClaims","rarity","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","state","setState","account","useWallet","currentBlock","useBlock","useEffect","a","multicall","epicNftFarm","address","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","rarityArr","priceMultiplierArr","maxMintPerNftArr","tokenPerBurnArr","prevState","toNumber","console","error","fetchContractData","params","getMinted","log","methods","call","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","tokenId","getBunnyId","tokenIdPromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","fetchNonLoggedInContractData","current","canBurnNft","Provider","value","getTokenIds","reInitialize","Value","Text","ModalContent","Actions","ClaimNftModal","onSuccess","onDismiss","isLoading","setIsLoading","pendingTx","setPendingTx","setError","TranslateString","useI18n","nftMintingContract","useRabbitMintingFarm","contraToken","useERC20","getLifeAddress","allowance","useNftAllowance","onApprove","useNftApprove","cakeBalance","useTokenBalance","cakeInWallet","getBalanceNumber","handleConfirm","mintNFT","send","from","on","title","color","mb","fullWidth","disabled","onClick","BurnNftModal","tokenIds","accepted","setAccepted","burnNFT","style","alignItems","display","checked","scale","onChange","ml","cursor","variant","Label","label","text","TransferNftModal","setValue","usePancakeRabbits","Web3","utils","isAddress","transferFrom","htmlFor","id","type","placeholder","evt","inputValue","isWarning","Header","DetailsButton","Button","attrs","InfoBlock","ViewNft","NftCard","isOpen","nftCount","nftBurnCount","useContext","history","useHistory","firstCharOfAccount","slice","lastCharOfAccount","loggedIn","nftIndex","indexOf","MINTS","MINTED","MAX_MINT","walletCanClaim","undefined","price","Math","round","isSupplyAvailable","walletOwnsNft","Icon","ChevronUpIcon","ChevronDownIcon","fetchDetails","useCallback","isDataFetched","handleClick","handleSuccess","useModal","onPresentClaimModal","onPresentBurnModal","onPresentTransferModal","isActive","outline","mt","p","endIcon","width","as","textAlign","NftGrid","BaseLayout","mediaQueries","sm","NftList","orderBy","nfts","map","NftProgressSimple","NftInfo","StyledHero","textSubtle","CustomButton","GoldenButton","Nft","Page","size"],"mappings":"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","file":"static/js/18.e22338b6.chunk.js","sourcesContent":["import { Nft } from './types'\n\nexport const EpicNftFarm = '0x6a63AF63675D3c9D498DF43Aa163F9243E7b4646'\nexport const NFT = '0x3F7C7C24fFA2ceFfaACE11B39D5b8a575A4B0674'\nexport const AMOUNT_TO_CLAIM = '10'\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Silver Pepes',\n    metadata: '',\n    description:\n      \"The count has had an epic existence sure, but it has not been without many attempts at his life. This artist's rendition pays homage to the time he was frozen in Carbonite ...oh wait, wrong story. Our bad, pretty slick tho right?\",\n    previewImage: 'preview-silver-pepe.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmaPP3CqB8iNcB9b9NCZVytNiaxZcJWt7Kk1vnHWwRL7hQ?filename=NFT-epic-silver-pepes.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 0,\n    nftId: 0,\n    tokenAmount: 350,\n    tokenSupply: 66,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Bank of Vladhalla',\n    metadata: '',\n    description:\n      \"They say when you leave this life you can't take it with you... Well, who's leaving? That's for mortals to worry about.\",\n    previewImage: 'preview-bank-of-vlad.png',\n    originalImage:\n      'https://ipfs.io/ipfs/Qma87NMJAu33nQuCRvoAK4MwP9CBwhGsLkQdTptM6uxoyp?filename=NFT-epic-bank-of-vladhalla.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 1,\n    nftId: 1,\n    tokenAmount: 350,\n    tokenSupply: 66,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Gates of Vladhalla',\n    metadata: '',\n    description:\n      'Tales have been written of the select few who have made it this far. The  sheer majesty of these very gates would make the hairs on their arms stand on end. Only the immortal shall pass through - will you?',\n    previewImage: 'preview-gate-of-vlad.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmW1az8XriRqdx2zXY7w71XFxXUEfH5hUsyZTzwGBe7gfh?filename=NFT-epic-gates-of-vladhalla.png',\n    fileType: 'png',\n    blurImage: '',\n    sortOrder: 2,\n    nftId: 2,\n    tokenAmount: 350,\n    tokenSupply: 66,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n]\n\nexport default Nfts\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface ImageProps {\n  src: string\n  alt: string\n  originalLink?: string\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\n  const previewImage = <StyledImage src={src} alt={alt} />\n\n  return (\n    <Container>\n      {originalLink ? (\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Image\n","import { AbiItem, fromWei } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport nft from 'config/abi/NFT.json'\nimport { NftFarm, NFT } from 'config/constants/nfts'\nimport BigNumber from 'bignumber.js'\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\n  const nftMintingFarmAbi = (nftFarm as unknown) as AbiItem\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\n}\n\nexport const getNftContract = (contractOptions?: ContractOptions) => {\n  const nftAbi = (nft as unknown) as AbiItem\n  return getContract(nftAbi, NFT, contractOptions)\n}\n\nexport const getFromWei = (v: any) => {\n  if (!v) return 0\n  return parseFloat(fromWei(v.toString(), 'ether'))\n}\n\nexport const getFromWayArray = (v: any) => {\n  if (!v) return []\n  const array = []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(fromWei(v[i].toString(), 'ether'))\n    }\n  }\n  return array\n}\n\nexport const getToFloat = (v: any) => {\n  if (!v) return []\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseInt(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport const getToInt = (v: any) => {\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseFloat(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport default getNftMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport epicNftFarm from 'config/abi/epicNftFarm.json'\nimport { EpicNftFarm } from 'config/constants/epic'\nimport multicall from 'utils/multicall'\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype BunnyMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  hasClaimed: number[]\n  ownerById: number[]\n  amounts: number[]\n  maxMintByNft: number[]\n  prices: number[]\n  myMints: number[]\n  countBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  nftMap: BunnyMap\n\n  allowMultipleClaims: boolean\n  rarity: string\n  priceMultiplier: number\n  maxMintPerNft: number\n  tokenPerBurn: number\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (nftId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    hasClaimed: [],\n    ownerById: [],\n    countBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    nftMap: {},\n\n    allowMultipleClaims: true,\n    rarity: '',\n    priceMultiplier: 0,\n    maxMintPerNft: 0,\n    tokenPerBurn: 0,\n\n    amounts: [],\n    maxMintByNft: [],\n    prices: [],\n    myMints: [],\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [\n          startBlockNumberArr,\n          endBlockNumberArr,\n          countBurntArr,\n          totalSupplyDistributedArr,\n          currentDistributedSupplyArr,\n\n          allowMultipleClaimsArr,\n          rarityArr,\n          priceMultiplierArr,\n          maxMintPerNftArr,\n          tokenPerBurnArr,\n        ] = await multicall(epicNftFarm, [\n          { address: EpicNftFarm, name: 'startBlockNumber' },\n          { address: EpicNftFarm, name: 'endBlockNumber' },\n          { address: EpicNftFarm, name: 'countBurnt' },\n          { address: EpicNftFarm, name: 'totalSupplyDistributed' },\n          { address: EpicNftFarm, name: 'currentDistributedSupply' },\n          { address: EpicNftFarm, name: 'allowMultipleClaims' },\n          { address: EpicNftFarm, name: 'rarity' },\n          { address: EpicNftFarm, name: 'priceMultiplier' },\n          { address: EpicNftFarm, name: 'maxMintPerNft' },\n          { address: EpicNftFarm, name: 'tokenPerBurn' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        const [countBurnt]: [BigNumber] = countBurntArr\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          countBurnt: countBurnt.toNumber(),\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n          allowMultipleClaims: allowMultipleClaimsArr[0],\n          rarity: rarityArr[0].toString(),\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\n          tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const nftContract = getNftContract()\n\n        const getMinted = await multicall(epicNftFarm, [{ address: EpicNftFarm, name: 'getMinted', params: [account] }])\n\n        // console.log('getMinted', getMinted)\n\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n        const ownerById = getMinted[0][2]\n        const maxMintByNft = getToInt(getMinted[0][3])\n        const prices = getFromWayArray(getMinted[0][4])\n        const myMints = getToInt(getMinted[0][5])\n\n        // console.log('hasClaimed', hasClaimed)\n        // console.log('amounts', amounts)\n        // console.log('ownerById', ownerById)\n        // console.log('maxMintByNft', maxMintByNft)\n        // console.log('prices', prices)\n        console.log('myMints', myMints)\n\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\n\n        let nftMap: BunnyMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the nftId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const nftId = await nftContract.methods.getBunnyId(tokenId).call()\n\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same nft so the format is:\n          // { [nftId]: [array of tokenIds] }\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [nftId, tokenId] = association\n\n            return {\n              ...accum,\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          ownerById,\n          balanceOf,\n          nftMap,\n\n          amounts,\n          maxMintByNft,\n          prices,\n          myMints,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    const fetchNonLoggedInContractData = async () => {\n      try {\n        const getMinted = await multicall(epicNftFarm, [\n          { address: EpicNftFarm, name: 'getMinted', params: ['0x0000000000000000000000000000000000000000'] },\n        ])\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          amounts,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    } else {\n      fetchNonLoggedInContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { EpicNftFarm, AMOUNT_TO_CLAIM } from 'config/constants/epic'\nimport { getLifeAddress } from 'utils/addressHelpers'\nimport { Nft } from 'config/constants/types'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useERC20, useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\nimport { useNftAllowance } from '../../../hooks/useAllowance'\nimport { useNftApprove } from '../../../hooks/useApprove'\n\ninterface ClaimNftModalProps {\n  nft: Nft\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(EpicNftFarm)\n  const contraToken = useERC20(getLifeAddress())\n  const allowance = useNftAllowance(contraToken, EpicNftFarm, pendingTx)\n  const onApprove = useNftApprove(contraToken, EpicNftFarm)\n  const cakeBalance = useTokenBalance(getLifeAddress())\n  const cakeInWallet = getBalanceNumber(cakeBalance)\n\n  // console.log('getLifeAddress', getLifeAddress(), EpicNftFarm, allowance)\n  // console.log('allowance', allowance)\n\n  const handleConfirm = async () => {\n    if (allowance === null) {\n      return\n    }\n\n    try {\n      await nftMintingContract.methods\n        .mintNFT(nft.nftId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to claim NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to mint NFT:', err)\n    }\n  }\n\n  useEffect(() => {\n    if (cakeInWallet === 0) {\n      setError(`You must have LIFE balance to claim NFT`)\n    }\n  }, [cakeInWallet, setError])\n\n  return (\n    <Modal title={`Claim NFT for ${nft.tokenAmount} LIFE`} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n      </ModalContent>\n      <Actions>\n        <Button\n          fullWidth\n          disabled={!account || pendingTx || isLoading || allowance > 0}\n          onClick={async () => {\n            try {\n              setPendingTx(true)\n              await onApprove()\n              setPendingTx(false)\n            } catch (e) {\n              setPendingTx(false)\n              console.error(e)\n            }\n          }}\n        >\n          Approve\n        </Button>\n\n        <Button\n          fullWidth\n          onClick={handleConfirm}\n          disabled={!account || isLoading || cakeInWallet <= 0 || allowance <= 0}\n        >\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { EpicNftFarm, AMOUNT_TO_CLAIM } from 'config/constants/epic'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface BurnNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [accepted, setAccepted] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(EpicNftFarm)\n\n  const handleConfirm = async () => {\n    try {\n      const [tokenId] = tokenIds\n\n      await nftMintingContract.methods\n        .burnNFT(tokenId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to burn NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to burn NFT:', err)\n    }\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>${AMOUNT_TO_CLAIM} LIFE</Value>\n        </InfoRow>\n      </ModalContent>\n      <ModalContent>\n        <Text color=\"failure\">\n          {TranslateString(999, 'When you trade in this NFT to receive LIFE, you will lose access to it forever!')}\n        </Text>\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\n      </ModalContent>\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\n          {TranslateString(999, 'I understand')}\n        </Text>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default BurnNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { NFT } from 'config/constants/epic'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftContract = usePancakeRabbits(NFT)\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await nftContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState, useContext, useCallback } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { AMOUNT_TO_CLAIM } from 'config/constants/epic'\nimport { useHistory } from 'react-router-dom'\nimport InfoRow from '../InfoRow'\nimport Image from '../Image'\nimport { NftProviderContext } from '../../contexts/NftProvider'\nimport { getNftContract } from '../../utils/contracts'\nimport ClaimNftModal from '../ClaimNftModal'\nimport BurnNftModal from '../BurnNftModal'\nimport TransferNftModal from '../TransferNftModal'\n\ninterface NftCardProps {\n  nft: Nft\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 44px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 0 24px 24px;\n`\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ViewNft = styled(Text)`\n  @media (max-width: 1300px) {\n    font-size: 11px;\n  }\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\n  const [state, setState] = useState({\n    isLoading: false,\n    isOpen: false,\n    nftCount: 0,\n    nftBurnCount: 0,\n  })\n  const TranslateString = useI18n()\n  const {\n    isInitialized,\n    hasClaimed,\n    ownerById,\n    canBurnNft,\n    totalSupplyDistributed,\n    currentDistributedSupply,\n    getTokenIds,\n    reInitialize,\n    allowMultipleClaims,\n    rarity,\n    priceMultiplier,\n    maxMintPerNft,\n    tokenPerBurn,\n    amounts,\n    maxMintByNft,\n    prices,\n    myMints,\n  } = useContext(NftProviderContext)\n  const { account } = useWallet()\n  const history = useHistory()\n\n  // maxMintPerNft limit max amount that a nft can be minted\n  // maxMintByNft array containing individual amount of mint per nft index\n  // prices array containing individual prices of a mint per nft index\n  // tokenPerBurn global price\n\n  const { nftId, name, previewImage, originalImage, description, tokenAmount, tokenSupply } = nft\n  const PRICE = prices[nftId] || tokenPerBurn // here we get the price\n\n  const firstCharOfAccount = account != null && account.slice(0, 4)\n  const lastCharOfAccount = account != null && account.slice(-4)\n\n  const accountName = account != null && `${firstCharOfAccount}...${lastCharOfAccount}`\n\n  const loggedIn = account !== null\n\n  console.log('?hasClaimed', hasClaimed)\n  // console.log('?ownerById', ownerById)\n\n  const nftIndex = hasClaimed && hasClaimed.indexOf(nftId)\n\n  console.log('nftId', nftId)\n  console.log('nftIndex', nftIndex)\n\n  const MINTS = myMints[nftIndex] || 0\n\n  // not sure about this, you need to check if this oser own this nft in the view nft page.\n  const youAreTheLastOwner = ownerById && ownerById[nftIndex] && ownerById[nftIndex].toString() === account.toString()\n\n  const MINTED = amounts[nftIndex] ? parseInt(amounts[nftIndex].toString()) : 0\n  const MAX_MINT = maxMintByNft[nftIndex] ? parseInt(maxMintByNft[nftIndex].toString()) : maxMintPerNft\n\n  const walletCanClaim = maxMintPerNft === 0 || MINTED === undefined || MINTED < MAX_MINT\n\n  let price = 350\n\n  if (amounts && amounts[nftIndex]) {\n    price = Math.round(350 * 1.016282 ** amounts[nftIndex] * 100) / 100\n  }\n\n  // console.log('CONTRACT/GALLERY INFO:', totalSupplyDistributed, rarity, priceMultiplier, maxMintPerNft, tokenPerBurn)\n  // console.log('LIMITS BY NFT:', tokenPerBurn, amounts, maxMintByNft, prices)\n  // console.log(nftId, 'walletCanClaim', walletCanClaim, MAX_MINT, MINTED, MAX_MINT)\n\n  const tokenIds = getTokenIds(nftId)\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const fetchDetails = useCallback(async () => {\n    setState((prevState) => ({ ...prevState, isLoading: true }))\n    try {\n      const { methods } = getNftContract()\n      const nftCount = await methods.nftCount(nftId).call()\n      const nftBurnCount = await methods.nftBurnCount(nftId).call()\n\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        isDataFetched: true,\n        nftCount: parseInt(nftCount, 10),\n        nftBurnCount: parseInt(nftBurnCount, 10),\n      }))\n    } catch (error) {\n      console.error(error)\n    }\n  }, [nftId])\n\n  const handleClick = async () => {\n    if (state.isOpen) {\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n    } else {\n      try {\n        await fetchDetails()\n      } catch (error) {\n        console.error(error)\n      } finally {\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n      }\n    }\n  }\n\n  const handleSuccess = () => {\n    fetchDetails()\n    reInitialize()\n  }\n\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n\n  return (\n    <Card isActive={walletOwnsNft}>\n      <Image src={`/images/nfts/${previewImage}`} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {isInitialized && walletCanClaim && (\n            <Tag outline variant=\"success\">\n              {TranslateString(526, 'Available')}\n            </Tag>\n          )}\n          {isInitialized && !walletCanClaim && (\n            <Tag outline variant=\"failure\">\n              Sold Out\n            </Tag>\n          )}\n          {isInitialized && tokenIds && (\n            <Tag outline variant=\"secondary\">\n              {TranslateString(999, 'In Wallet')}\n            </Tag>\n          )}\n        </Header>\n        {isInitialized && walletOwnsNft && (\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {TranslateString(999, 'Transfer')}\n          </Button>\n        )}\n        {isInitialized && loggedIn && walletCanClaim && isSupplyAvailable && (\n          <Button fullWidth onClick={onPresentClaimModal} mt=\"24px\">\n            {TranslateString(999, 'Claim this NFT')} for {price} LIFE\n          </Button>\n        )}\n        {isInitialized && (\n          <Button fullWidth onClick={() => history.push(`epic-detail/${nftId}`)} mt=\"24px\">\n            <ViewNft>\n              View NFT ({MINTED}/{tokenSupply} MINTED)\n            </ViewNft>\n          </Button>\n        )}\n        {isInitialized && canBurnNft && walletOwnsNft && (\n          <Button variant=\"danger\" fullWidth onClick={onPresentBurnModal} mt=\"24px\">\n            {TranslateString(999, 'Trade in for LIFE')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {state.isLoading ? TranslateString(999, 'Loading...') : TranslateString(999, 'Details')}\n        </DetailsButton>\n        {state.isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\n              {description}\n            </Text>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Number minted')}:</Text>\n              <Value>\n                {MINTED}/{tokenSupply}\n              </Value>\n            </InfoRow>\n            <InfoRow>\n              <Text>{TranslateString(999, 'Minted By Me')}:</Text>\n              <Value>{MINTS}</Value>\n            </InfoRow>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\n\nconst NftGrid = styled(BaseLayout)`\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  & > div {\n    grid-column: 2 / 6;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n      grid-column: span 4;\n    }\n  }\n`\n\nexport default NftGrid\n","import React from 'react'\nimport orderBy from 'lodash/orderBy'\nimport nfts from 'config/constants/epic'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\n\nconst NftList = () => {\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => (\n        <div key={nft.name}>\n          <NftCard nft={nft} />\n        </div>\n      ))}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","import React, { useContext } from 'react'\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst NftProgressSimple = () => {\n  const TranslateString = useI18n()\n  const { isInitialized, currentDistributedSupply, totalSupplyDistributed, countBurnt } = useContext(NftProviderContext)\n\n  return (\n    <Card>\n      <CardBody>\n        <InfoRow>\n          <Text>{TranslateString(999, 'Total Epic and Legendary NFTs')}:</Text>\n          <Text>\n            <strong>{!isInitialized ? '...' : `${currentDistributedSupply}/${totalSupplyDistributed}`}</strong>\n          </Text>\n        </InfoRow>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgressSimple\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NftProgress from './NftProgress'\nimport NftProgressSimple from './NftProgressSimple'\nimport StatusCard from './StatusCard'\n\nconst StyledNtfInfo = styled.div`\n  align-items: start;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst NftInfo = () => {\n  const { canBurnNft } = useContext(NftProviderContext)\n\n  return <NftProgressSimple />\n}\n\nexport default NftInfo\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Button } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport { useHistory } from 'react-router-dom'\nimport HowItWorks from './components/HowItWorks'\nimport NftList from './components/NftList'\nimport NftProvider from './contexts/NftProvider'\nimport NftInfo from './components/NftInfo'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst CustomButton = styled(Button)`\n  margin-right: 20px;\n`\n\nconst GoldenButton = styled(Button)`\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px rgba(139, 66, 8, 1),\n    inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n  background-image: linear-gradient(160deg, #a54e07, #b47e11, #fef1a2, #bc881b, #a54e07);\n  border: 1px solid #a55d07;\n  color: rgb(120, 50, 5);\n  text-shadow: 0 2px 2px rgba(250, 227, 133, 1);\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  background-size: 100% 100%;\n  background-position: center;\n\n  &:focus,\n  &:hover {\n    background-size: 150% 150%;\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23), inset 0 -2px 5px 1px #b17d10,\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n    border: 1px solid rgba(165, 93, 7, 0.6);\n    color: rgba(120, 50, 5, 0.8);\n  }\n  &:active {\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px #b17d10,\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n  }\n`\n\nconst Nft = () => {\n  const TranslateString = useI18n()\n  const history = useHistory()\n\n  return (\n    <NftProvider>\n      <Page>\n        <StyledHero>\n          <Heading as=\"h1\" size=\"xl\" color=\"#9f0d0d\" mb=\"24px\">\n            Epic NFTs\n          </Heading>\n          <Heading as=\"h2\" size=\"lg\" color=\"#9f0d0d\">\n            {TranslateString(999, 'Trade in for LIFE, or keep for your collection!')}\n          </Heading>\n          <CustomButton onClick={() => history.push(`nft`)} mt=\"24px\">\n            Base and Rare NFTs\n          </CustomButton>\n          <CustomButton variant=\"subtle\" onClick={() => history.push(`epic`)} mt=\"24px\">\n            Epic NFTs\n          </CustomButton>\n          <GoldenButton onClick={() => history.push(`legendary`)} mt=\"24px\">\n            Legendary NFTs\n          </GoldenButton>\n        </StyledHero>\n        <NftInfo />\n        <NftList />\n      </Page>\n    </NftProvider>\n  )\n}\n\nexport default Nft\n"],"sourceRoot":""}