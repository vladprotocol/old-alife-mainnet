{"version":3,"sources":["config/constants/legendary.ts","views/MyLegendaryCollection/components/InfoRow.tsx","views/MyLegendaryCollection/components/Image.tsx","views/MyLegendaryCollection/utils/contracts.ts","views/MyLegendaryCollection/contexts/NftProvider.tsx","views/MyLegendaryCollection/components/ClaimNftModal.tsx","views/MyLegendaryCollection/components/BurnNftModal.tsx","views/MyLegendaryCollection/components/TransferNftModal.tsx","views/MyLegendaryCollection/components/NftCard/index.tsx","views/MyLegendaryCollection/components/NftGrid.tsx","views/MyLegendaryCollection/components/NftList.tsx","views/MyLegendaryCollection/components/NftProgressSimple.tsx","views/MyLegendaryCollection/components/NftInfo.tsx","views/MyLegendaryCollection/index.tsx"],"names":["LegendaryNftFarm","NFT","AMOUNT_TO_CLAIM","Nfts","name","metadata","description","previewImage","originalImage","fileType","blurImage","sortOrder","nftId","tokenAmount","tokenSupply","nftFarmContract","nftContract","InfoRow","styled","div","Container","theme","colors","borderColor","StyledImage","img","Image","src","alt","originalLink","href","target","rel","getNftContract","contractOptions","nftAbi","nft","getContract","getFromWayArray","v","array","t","length","i","push","fromWei","toString","getToFloat","parseInt","getToInt","parseFloat","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","useState","isInitialized","hasClaimed","ownerById","countBurnt","startBlockNumber","endBlockNumber","totalSupplyDistributed","currentDistributedSupply","balanceOf","nftMap","allowMultipleClaims","rarity","priceMultiplier","maxMintPerNft","tokenPerBurn","amounts","maxMintByNft","prices","myMints","state","setState","account","useWallet","currentBlock","useBlock","useEffect","a","multicall","epicNftFarm","address","startBlockNumberArr","endBlockNumberArr","countBurntArr","totalSupplyDistributedArr","currentDistributedSupplyArr","allowMultipleClaimsArr","rarityArr","priceMultiplierArr","maxMintPerNftArr","tokenPerBurnArr","prevState","toNumber","console","error","fetchContractData","params","getMinted","methods","call","getTokenIdAndNftId","index","tokenOfOwnerByIndex","tokenId","getNftId","tokenIdPromises","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","current","canBurnNft","Provider","value","getTokenIds","reInitialize","Value","Text","ModalContent","Actions","ClaimNftModal","onSuccess","onDismiss","isLoading","setIsLoading","pendingTx","setPendingTx","setError","TranslateString","useI18n","nftMintingContract","useRabbitMintingFarm","contraToken","useERC20","getLifeAddress","allowance","useNftAllowance","onApprove","useNftApprove","cakeBalance","useTokenBalance","cakeInWallet","getBalanceNumber","handleConfirm","mintNFT","send","from","on","title","color","mb","fullWidth","disabled","onClick","BurnNftModal","tokenIds","accepted","setAccepted","burnNFT","style","alignItems","display","checked","scale","onChange","ml","cursor","variant","Label","label","text","TransferNftModal","setValue","usePancakeRabbits","Web3","utils","isAddress","transferFrom","htmlFor","id","type","placeholder","evt","inputValue","isWarning","StyledNotFound","Header","InfoBlock","Button","attrs","SmallCard","Card","NftCard","isOpen","nftCount","nftBurnCount","useContext","log","nftIndex","indexOf","MINTS","MINTED","MAX_MINT","firstCharOfAccount","slice","lastCharOfAccount","loggedIn","walletCanClaim","undefined","Math","round","walletOwnsNft","fetchDetails","ChevronUpIcon","ChevronDownIcon","useCallback","isDataFetched","handleSuccess","useModal","onPresentTransferModal","isActive","width","loop","autoPlay","muted","kind","outline","mt","p","as","textAlign","Page","NftGrid","BaseLayout","mediaQueries","sm","NftList","filteredNft","nfts","forEach","key","orderBy","map","NftProgressSimple","myNFTs","NftInfo","StyledHero","textSubtle","CustomButton","GoldenButton","Nft","history","useHistory","size"],"mappings":"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","file":"static/js/21.429c4e82.chunk.js","sourcesContent":["import { Nft } from './types'\n\nexport const LegendaryNftFarm = '0x6a63AF63675D3c9D498DF43Aa163F9243E7b4646'\nexport const NFT = '0x3F7C7C24fFA2ceFfaACE11B39D5b8a575A4B0674'\nexport const AMOUNT_TO_CLAIM = '10'\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Golden Pepes',\n    metadata: '',\n    description:\n      'For a brief period in time Pepe Drakul led a very powerful unit known as the 7 golden Vampires. He commissioned a bust made of the purest gold to commemorate his time with them.',\n    previewImage: 'preview-golden-pepes.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/Qmdv1t4kUa8YSP8rpZTXLKvpycnijWJdCSpjsN8sjArGx8?filename=NFT-legendary-pepes-gold.mp4',\n    fileType: 'mp4',\n    blurImage: '',\n    sortOrder: 3,\n    nftId: 3,\n    tokenAmount: 1200,\n    tokenSupply: 6,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'Immortality',\n    metadata: '',\n    description:\n      'Those who have ever held the Chalice of LIFE are granted Immortality. Do not fear eternal sleep/slumber, for it will not come for you.',\n    previewImage: 'preview-immortality.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmaHeTsV6AnhqWDAeBUvwmQbo7RC6bM1jQzVQUCQSLg9Bp?filename=NFT-legendary-immortality.png',\n    fileType: 'png',\n    blurImage: '',\n    sortOrder: 4,\n    nftId: 4,\n    tokenAmount: 1200,\n    tokenSupply: 6,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n  {\n    name: 'The VladFather',\n    metadata: '',\n    description:\n      'His sceptre slammed into the marble floor with a crack, prompting the artist to begin. How many final breaths has that hand taken from his enemies? His eyes, wildly electric and filled with menace, and a stance that dares you to make your move. I don’t envy the one tasked with creating this portrait. Pepe Drakul has only ever posed for one drawing and this is it.',\n    previewImage: 'preview-the-vladfather.jpg',\n    originalImage:\n      'https://ipfs.io/ipfs/QmVEdevPc1nFLJrFQK4GsJtcS5486uaQE73mo7aKjw13ph?filename=NFT-legendary-vlad-father.png',\n    fileType: 'png',\n    blurImage: '',\n    sortOrder: 5,\n    nftId: 5,\n    tokenAmount: 1200,\n    tokenSupply: 6,\n    nftFarmContract: '0x3627Ca89675b42489aD39619A92dd0Ce24CA90bB',\n    nftContract: '0xa521D5FA64D0aAdB4ee607BAb20142aA173e4392',\n  },\n]\n\nexport default Nfts\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface ImageProps {\n  src: string\n  alt: string\n  originalLink?: string\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\n  const previewImage = <StyledImage src={src} alt={alt} />\n\n  return (\n    <Container>\n      {originalLink ? (\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Image\n","import { AbiItem, fromWei } from 'web3-utils'\nimport { getContract } from 'utils/web3'\nimport { ContractOptions } from 'web3-eth-contract'\nimport nftFarm from 'config/abi/NftFarm.json'\nimport nft from 'config/abi/NFT.json'\nimport { NftFarm, NFT } from 'config/constants/nfts'\nimport BigNumber from 'bignumber.js'\n// TODO: Figure out how to add current account to contracts to write methods can be used\n\nexport const getNftMintingContract = (contractOptions?: ContractOptions) => {\n  const nftMintingFarmAbi = (nftFarm as unknown) as AbiItem\n  return getContract(nftMintingFarmAbi, NftFarm, contractOptions)\n}\n\nexport const getNftContract = (contractOptions?: ContractOptions) => {\n  const nftAbi = (nft as unknown) as AbiItem\n  return getContract(nftAbi, NFT, contractOptions)\n}\n\nexport const getFromWei = (v: any) => {\n  if (!v) return 0\n  return parseFloat(fromWei(v.toString(), 'ether'))\n}\n\nexport const getFromWayArray = (v: any) => {\n  if (!v) return []\n  const array = []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(fromWei(v[i].toString(), 'ether'))\n    }\n  }\n  return array\n}\n\nexport const getToFloat = (v: any) => {\n  if (!v) return []\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseInt(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport const getToInt = (v: any) => {\n  const array = []\n  if (!v) return []\n  const t = v.length\n  for (let i = 0; i < t; i++) {\n    if (!v[i]) {\n      array.push(0)\n    } else {\n      array.push(parseFloat(v[i].toString()))\n    }\n  }\n  return array\n}\n\nexport default getNftMintingContract\n","import React, { createContext, ReactNode, useEffect, useRef, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useBlock from 'hooks/useBlock'\nimport epicNftFarm from 'config/abi/epicNftFarm.json'\nimport { LegendaryNftFarm } from 'config/constants/legendary'\nimport multicall from 'utils/multicall'\nimport { getNftContract, getFromWei, getToFloat, getToInt, getFromWayArray } from '../utils/contracts'\n\ninterface NftProviderProps {\n  children: ReactNode\n}\n\ntype NftMap = {\n  [key: number]: number[]\n}\n\ntype State = {\n  isInitialized: boolean\n  hasClaimed: number[]\n  ownerById: number[]\n  amounts: number[]\n  maxMintByNft: number[]\n  prices: number[]\n  myMints: number[]\n  countBurnt: number\n  endBlockNumber: number\n  startBlockNumber: number\n  totalSupplyDistributed: number\n  currentDistributedSupply: number\n  balanceOf: number\n  nftMap: NftMap\n\n  allowMultipleClaims: boolean\n  rarity: string\n  priceMultiplier: number\n  maxMintPerNft: number\n  tokenPerBurn: number\n}\n\ntype Context = {\n  canBurnNft: boolean\n  getTokenIds: (nftId: number) => number[]\n  reInitialize: () => void\n} & State\n\nexport const NftProviderContext = createContext<Context | null>(null)\n\nconst NftProvider: React.FC<NftProviderProps> = ({ children }) => {\n  const isMounted = useRef(true)\n  const [state, setState] = useState<State>({\n    isInitialized: false,\n    hasClaimed: [],\n    ownerById: [],\n    countBurnt: 0,\n    startBlockNumber: 0,\n    endBlockNumber: 0,\n    totalSupplyDistributed: 0,\n    currentDistributedSupply: 0,\n    balanceOf: 0,\n    nftMap: {},\n\n    allowMultipleClaims: true,\n    rarity: '',\n    priceMultiplier: 0,\n    maxMintPerNft: 0,\n    tokenPerBurn: 0,\n\n    amounts: [],\n    maxMintByNft: [],\n    prices: [],\n    myMints: [],\n  })\n  const { account } = useWallet()\n  const currentBlock = useBlock()\n\n  const { isInitialized } = state\n\n  // Static data\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const [\n          startBlockNumberArr,\n          endBlockNumberArr,\n          countBurntArr,\n          totalSupplyDistributedArr,\n          currentDistributedSupplyArr,\n\n          allowMultipleClaimsArr,\n          rarityArr,\n          priceMultiplierArr,\n          maxMintPerNftArr,\n          tokenPerBurnArr,\n        ] = await multicall(epicNftFarm, [\n          { address: LegendaryNftFarm, name: 'startBlockNumber' },\n          { address: LegendaryNftFarm, name: 'endBlockNumber' },\n          { address: LegendaryNftFarm, name: 'countBurnt' },\n          { address: LegendaryNftFarm, name: 'totalSupplyDistributed' },\n          { address: LegendaryNftFarm, name: 'currentDistributedSupply' },\n          { address: LegendaryNftFarm, name: 'allowMultipleClaims' },\n          { address: LegendaryNftFarm, name: 'rarity' },\n          { address: LegendaryNftFarm, name: 'priceMultiplier' },\n          { address: LegendaryNftFarm, name: 'maxMintPerNft' },\n          { address: LegendaryNftFarm, name: 'tokenPerBurn' },\n        ])\n\n        // TODO: Figure out why these are coming back as arrays\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\n        const [countBurnt]: [BigNumber] = countBurntArr\n        const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n        const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          countBurnt: countBurnt.toNumber(),\n          startBlockNumber: startBlockNumber.toNumber(),\n          endBlockNumber: endBlockNumber.toNumber(),\n          currentDistributedSupply: currentDistributedSupply.toNumber(),\n          totalSupplyDistributed: totalSupplyDistributed.toNumber(),\n          allowMultipleClaims: allowMultipleClaimsArr[0],\n          rarity: rarityArr[0].toString(),\n          priceMultiplier: parseFloat(priceMultiplierArr[0].toString()),\n          maxMintPerNft: parseInt(maxMintPerNftArr[0].toString()),\n          tokenPerBurn: getFromWei(tokenPerBurnArr[0]),\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    fetchContractData()\n  }, [isInitialized, setState])\n\n  // Data from the contract that needs an account\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const nftContract = getNftContract()\n\n        const getMinted = await multicall(epicNftFarm, [\n          { address: LegendaryNftFarm, name: 'getMinted', params: [account] },\n        ])\n\n        // console.log('getMinted', getMinted)\n\n        const hasClaimed = getMinted[0][0]\n        const amounts = getToFloat(getMinted[0][1])\n        const ownerById = getMinted[0][2]\n        const maxMintByNft = getToInt(getMinted[0][3])\n        const prices = getFromWayArray(getMinted[0][4])\n        const myMints = getToInt(getMinted[0][5])\n\n        // console.log('hasClaimed', hasClaimed)\n        // console.log('amounts', amounts)\n        // console.log('ownerById', ownerById)\n        // console.log('maxMintByNft', maxMintByNft)\n        // console.log('prices', prices)\n        // console.log('myMints', myMints)\n\n        const balanceOf = await nftContract.methods.balanceOf(account).call()\n\n        let nftMap: NftMap = {}\n\n        // If the \"balanceOf\" is greater than 0 then retrieve the tokenIds\n        // owned by the wallet, then the nftId's associated with the tokenIds\n        if (balanceOf > 0) {\n          const getTokenIdAndNftId = async (index: number) => {\n            try {\n              const tokenId = await nftContract.methods.tokenOfOwnerByIndex(account, index).call()\n              const nftId = await nftContract.methods.getNftId(tokenId).call()\n\n              return [parseInt(nftId, 10), parseInt(tokenId, 10)]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndNftId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          // While improbable a wallet can own more than one of the same nft so the format is:\n          // { [nftId]: [array of tokenIds] }\n          nftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [nftId, tokenId] = association\n\n            return {\n              ...accum,\n              [nftId]: accum[nftId] ? [...accum[nftId], tokenId] : [tokenId],\n            }\n          }, {})\n        }\n\n        setState((prevState) => ({\n          ...prevState,\n          isInitialized: true,\n          hasClaimed,\n          ownerById,\n          balanceOf,\n          nftMap,\n\n          amounts,\n          maxMintByNft,\n          prices,\n          myMints,\n        }))\n      } catch (error) {\n        console.error('an error occured', error)\n      }\n    }\n\n    if (account) {\n      fetchContractData()\n    }\n  }, [isInitialized, account, setState])\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false\n    }\n  }, [isMounted])\n\n  const canBurnNft = currentBlock <= state.endBlockNumber\n  const getTokenIds = (nftId: number) => state.nftMap[nftId]\n\n  /**\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\n   * For example when a transaction has been completed\n   */\n  const reInitialize = () => {\n    // Only attempt to re-initialize if the component is still mounted\n    // Transactions can take awhile so it is likely some users will navigate to another page\n    // before the transaction is finished\n    if (isMounted.current) {\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\n    }\n  }\n\n  return (\n    <NftProviderContext.Provider value={{ ...state, canBurnNft, getTokenIds, reInitialize }}>\n      {children}\n    </NftProviderContext.Provider>\n  )\n}\n\nexport default NftProvider\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { LegendaryNftFarm, AMOUNT_TO_CLAIM } from 'config/constants/legendary'\nimport { getLifeAddress } from 'utils/addressHelpers'\nimport { Nft } from 'config/constants/types'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { useERC20, useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\nimport { useNftAllowance } from '../../../hooks/useAllowance'\nimport { useNftApprove } from '../../../hooks/useApprove'\n\ninterface ClaimNftModalProps {\n  nft: Nft\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(LegendaryNftFarm)\n  const contraToken = useERC20(getLifeAddress())\n  const allowance = useNftAllowance(contraToken, LegendaryNftFarm, pendingTx)\n  const onApprove = useNftApprove(contraToken, LegendaryNftFarm)\n  const cakeBalance = useTokenBalance(getLifeAddress())\n  const cakeInWallet = getBalanceNumber(cakeBalance)\n\n  // console.log('getLifeAddress', getLifeAddress(), LegendaryNftFarm, allowance)\n  // console.log('allowance', allowance)\n\n  const handleConfirm = async () => {\n    if (allowance === null) {\n      return\n    }\n\n    try {\n      await nftMintingContract.methods\n        .mintNFT(nft.nftId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to claim NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to mint NFT:', err)\n    }\n  }\n\n  useEffect(() => {\n    if (cakeInWallet === 0) {\n      setError(`You must have LIFE balance to claim NFT`)\n    }\n  }, [cakeInWallet, setError])\n\n  return (\n    <Modal title={`Claim NFT for ${nft.tokenAmount} LIFE`} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n      </ModalContent>\n      <Actions>\n        <Button\n          fullWidth\n          disabled={!account || pendingTx || isLoading || allowance > 0}\n          onClick={async () => {\n            try {\n              setPendingTx(true)\n              await onApprove()\n              setPendingTx(false)\n            } catch (e) {\n              setPendingTx(false)\n              console.error(e)\n            }\n          }}\n        >\n          Approve\n        </Button>\n\n        <Button\n          fullWidth\n          onClick={handleConfirm}\n          disabled={!account || isLoading || cakeInWallet <= 0 || allowance <= 0}\n        >\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Checkbox, Modal, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { LegendaryNftFarm, AMOUNT_TO_CLAIM } from 'config/constants/legendary'\nimport { useRabbitMintingFarm } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface BurnNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst BurnNftModal: React.FC<BurnNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n  const [accepted, setAccepted] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftMintingContract = useRabbitMintingFarm(LegendaryNftFarm)\n\n  const handleConfirm = async () => {\n    try {\n      const [tokenId] = tokenIds\n\n      await nftMintingContract.methods\n        .burnNFT(tokenId)\n        .send({ from: account })\n        .on('sending', () => {\n          setIsLoading(true)\n        })\n        .on('receipt', () => {\n          onDismiss()\n          onSuccess()\n        })\n        .on('error', () => {\n          console.error(error)\n          setError('Unable to burn NFT')\n          setIsLoading(false)\n        })\n    } catch (err) {\n      console.error('Unable to burn NFT:', err)\n    }\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Trade in NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Trade in')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <InfoRow>\n          <Text>{TranslateString(999, 'You will receive')}:</Text>\n          <Value>${AMOUNT_TO_CLAIM} LIFE</Value>\n        </InfoRow>\n      </ModalContent>\n      <ModalContent>\n        <Text color=\"failure\">\n          {TranslateString(999, 'When you trade in this NFT to receive LIFE, you will lose access to it forever!')}\n        </Text>\n        <Text color=\"failure\">{TranslateString(999, 'It will be burned and removed from circulation')}</Text>\n      </ModalContent>\n      <ModalContent style={{ alignItems: 'center', display: 'inline-flex' }}>\n        <Checkbox checked={accepted} scale=\"sm\" onChange={() => setAccepted(!accepted)} />\n        <Text ml=\"8px\" onClick={() => setAccepted(!accepted)} style={{ cursor: 'pointer' }}>\n          {TranslateString(999, 'I understand')}\n        </Text>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !accepted}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default BurnNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { NFT } from 'config/constants/legendary'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const nftContract = usePancakeRabbits(NFT)\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await nftContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState, useContext, useCallback } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n  LogoIcon,\n} from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport { AMOUNT_TO_CLAIM } from 'config/constants/legendary'\nimport Page from 'components/layout/Page'\nimport InfoRow from '../InfoRow'\nimport Image from '../Image'\nimport { NftProviderContext } from '../../contexts/NftProvider'\nimport { getNftContract } from '../../utils/contracts'\nimport ClaimNftModal from '../ClaimNftModal'\nimport BurnNftModal from '../BurnNftModal'\nimport TransferNftModal from '../TransferNftModal'\n\ninterface NftCardProps {\n  nft: Nft\n}\n\nconst StyledNotFound = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 64px);\n  justify-content: center;\n`\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 0 24px 24px;\n`\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst SmallCard = styled(Card)`\n  margin: 0 auto;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\n  const [state, setState] = useState({\n    isLoading: false,\n    isOpen: true,\n    nftCount: 0,\n    nftBurnCount: 0,\n  })\n  const TranslateString = useI18n()\n  const {\n    isInitialized,\n    hasClaimed,\n    ownerById,\n    canBurnNft,\n    totalSupplyDistributed,\n    currentDistributedSupply,\n    getTokenIds,\n    reInitialize,\n    allowMultipleClaims,\n    rarity,\n    priceMultiplier,\n    maxMintPerNft,\n    tokenPerBurn,\n    amounts,\n    maxMintByNft,\n    prices,\n    myMints,\n  } = useContext(NftProviderContext)\n  const { account } = useWallet()\n\n  console.log('CONTRACT/GALLERY INFO:', totalSupplyDistributed, rarity, priceMultiplier, maxMintPerNft, tokenPerBurn)\n  console.log('LIMITS BY NFT:', tokenPerBurn, amounts, maxMintByNft, prices)\n\n  // maxMintPerNft limit max amount that a nft can be minted\n  // maxMintByNft array containing individual amount of mint per nft index\n  // prices array containing individual prices of a mint per nft index\n  // tokenPerBurn global price\n\n  console.log(ownerById)\n\n  const { nftId, name, previewImage, originalImage, fileType, description, metadata, tokenAmount, tokenSupply } = nft\n  const PRICE = prices[nft.nftId] || tokenPerBurn // here we get the price\n\n  const nftIndex = hasClaimed && hasClaimed.indexOf(nftId)\n\n  const MINTS = myMints[nftIndex] || 0\n\n  const MINTED = amounts[nftIndex] ? parseInt(amounts[nftIndex].toString()) : 0\n  const MAX_MINT = maxMintByNft[nftIndex] ? parseInt(maxMintByNft[nftIndex].toString()) : maxMintPerNft\n\n  const hasClaimedArr: any = hasClaimed[0]\n  const ownerByIdArr: any = ownerById[0]\n\n  const firstCharOfAccount = account != null && account.slice(0, 4)\n  const lastCharOfAccount = account != null && account.slice(-4)\n\n  const accountName = account != null && `${firstCharOfAccount}...${lastCharOfAccount}`\n\n  const loggedIn = account !== null\n\n  // console.log('?hasClaimed', hasClaimed)\n  // console.log('?ownerById', ownerById)\n\n  const walletCanClaim = maxMintPerNft === 0 || MINTED === undefined || MINTED < MAX_MINT\n\n  const price = Math.round(350 * 1.37973 ** amounts[nftIndex] * 100) / 100\n\n  const tokenIds = getTokenIds(nftId)\n  const isSupplyAvailable = currentDistributedSupply < totalSupplyDistributed\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\n  const Icon = state.isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const fetchDetails = useCallback(async () => {\n    setState((prevState) => ({ ...prevState, isLoading: true }))\n    try {\n      const { methods } = getNftContract()\n      const nftCount = await methods.nftCount(nftId).call()\n      const nftBurnCount = await methods.nftBurnCount(nftId).call()\n\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        isDataFetched: true,\n        nftCount: parseInt(nftCount, 10),\n        nftBurnCount: parseInt(nftBurnCount, 10),\n      }))\n    } catch (error) {\n      console.error(error)\n    }\n  }, [nftId])\n\n  const handleClick = async () => {\n    if (state.isOpen) {\n      setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n    } else {\n      try {\n        await fetchDetails()\n      } catch (error) {\n        console.error(error)\n      } finally {\n        setState((prevState) => ({ ...prevState, isOpen: !prevState.isOpen }))\n      }\n    }\n  }\n\n  const handleSuccess = () => {\n    fetchDetails()\n    reInitialize()\n  }\n\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} />)\n  const [onPresentBurnModal] = useModal(<BurnNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />)\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n\n  if (isInitialized && loggedIn && MINTS > 0) {\n    return (\n      <SmallCard isActive={walletOwnsNft}>\n        {fileType === 'mp4' && (\n          <video width=\"100%\" loop autoPlay muted>\n            <source src={originalImage} type=\"video/mp4\" />\n            <track kind=\"captions\" />\n          </video>\n        )}\n        {fileType !== 'mp4' && (\n          <Image src={originalImage} alt={name} originalLink={walletOwnsNft ? originalImage : null} />\n        )}\n        <CardBody>\n          <Header>\n            <Heading>{name}</Heading>\n            {isInitialized && walletCanClaim && (\n              <Tag outline variant=\"success\">\n                {TranslateString(526, 'Available')}\n              </Tag>\n            )}\n            {isInitialized && !walletCanClaim && (\n              <Tag outline variant=\"failure\">\n                Sold Out\n              </Tag>\n            )}\n            {isInitialized && tokenIds && (\n              <Tag outline variant=\"secondary\">\n                {TranslateString(999, 'In Wallet')}\n              </Tag>\n            )}\n          </Header>\n          {isInitialized && walletOwnsNft && (\n            <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n              {TranslateString(999, 'Transfer')}\n            </Button>\n          )}\n        </CardBody>\n        <CardFooter p=\"2\">\n          {state.isOpen && (\n            <InfoBlock>\n              <Text as=\"p\" color=\"textSubtle\" mb=\"16px\" style={{ textAlign: 'center' }}>\n                {description}\n              </Text>\n              <InfoRow>\n                <Text>{TranslateString(999, 'Number minted')}:</Text>\n                <Value>\n                  {MINTED}/{tokenSupply}\n                </Value>\n              </InfoRow>\n              <InfoRow>\n                <Text>{TranslateString(999, 'Minted By Me')}:</Text>\n                <Value>{MINTS}</Value>\n              </InfoRow>\n            </InfoBlock>\n          )}\n        </CardFooter>\n      </SmallCard>\n    )\n  }\n\n  return (\n    <Page>\n      <StyledNotFound>\n        <LogoIcon width=\"64px\" mb=\"8px\" />\n        <Text mb=\"16px\">{TranslateString(999, 'loading...')}</Text>\n      </StyledNotFound>\n    </Page>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\n\nconst NftGrid = styled(BaseLayout)`\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  & > div {\n    grid-column: 2 / 6;\n\n    ${({ theme }) => theme.mediaQueries.sm} {\n      grid-column: span 6;\n    }\n  }\n`\n\nexport default NftGrid\n","import React, { useState, useContext, useCallback } from 'react'\nimport orderBy from 'lodash/orderBy'\nimport nfts from 'config/constants/legendary'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\nimport { NftProviderContext } from '../contexts/NftProvider'\n\nconst NftList = () => {\n  const { myMints, hasClaimed } = useContext(NftProviderContext)\n\n  const filteredNft = []\n\n  nfts.forEach(function (nft, key) {\n    const { nftId, name, previewImage, originalImage, description } = nft\n\n    const nftIndex = hasClaimed && hasClaimed.indexOf(nftId)\n\n    const MINTS = myMints[nftIndex] || 0\n\n    if (MINTS > 0) {\n      filteredNft.push(nft)\n    }\n  })\n\n  return (\n    <NftGrid>\n      {orderBy(filteredNft, 'sortOrder').map((nft) => (\n        <div key={nft.name}>\n          <NftCard nft={nft} />\n        </div>\n      ))}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","import React, { useContext } from 'react'\nimport { Card, CardBody, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport nfts from 'config/constants/legendary'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport InfoRow from './InfoRow'\n\nconst NftProgressSimple = () => {\n  const TranslateString = useI18n()\n  const { isInitialized, currentDistributedSupply, totalSupplyDistributed, countBurnt, myMints } = useContext(\n    NftProviderContext,\n  )\n\n  let myNFTs = 0\n\n  nfts.forEach(function (nft, key) {\n    const { nftId } = nft\n    const MINTS = myMints[nftId] || 0\n    myNFTs += MINTS\n  })\n\n  return (\n    <Card>\n      <CardBody>\n        <InfoRow>\n          <Text>{TranslateString(999, 'My Legendary NFTs')}:</Text>\n          <Text>\n            <strong>{myNFTs}</strong>\n          </Text>\n        </InfoRow>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default NftProgressSimple\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { NftProviderContext } from '../contexts/NftProvider'\nimport NftProgress from './NftProgress'\nimport NftProgressSimple from './NftProgressSimple'\nimport StatusCard from './StatusCard'\n\nconst StyledNtfInfo = styled.div`\n  align-items: start;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst NftInfo = () => {\n  const { canBurnNft } = useContext(NftProviderContext)\n\n  return <NftProgressSimple />\n}\n\nexport default NftInfo\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, LogoIcon, Text, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport { useHistory } from 'react-router-dom'\nimport HowItWorks from './components/HowItWorks'\nimport NftList from './components/NftList'\nimport NftProvider from './contexts/NftProvider'\nimport NftInfo from './components/NftInfo'\n\nconst StyledHero = styled.div`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst StyledNotFound = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 64px);\n  justify-content: center;\n`\n\nconst CustomButton = styled(Button)`\n  margin-right: 20px;\n`\n\nconst GoldenButton = styled(Button)`\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px rgba(139, 66, 8, 1),\n    inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n  background-image: linear-gradient(160deg, #a54e07, #b47e11, #fef1a2, #bc881b, #a54e07);\n  border: 1px solid #a55d07;\n  color: rgb(120, 50, 5);\n  text-shadow: 0 2px 2px rgba(250, 227, 133, 1);\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  background-size: 100% 100%;\n  background-position: center;\n\n  &:focus,\n  &:hover {\n    background-size: 150% 150%;\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23), inset 0 -2px 5px 1px #b17d10,\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n    border: 1px solid rgba(165, 93, 7, 0.6);\n    color: rgba(120, 50, 5, 0.8);\n  }\n  &:active {\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(110, 80, 20, 0.4), inset 0 -2px 5px 1px #b17d10,\n      inset 0 -1px 1px 3px rgba(250, 227, 133, 1);\n  }\n`\n\nconst Nft = () => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const history = useHistory()\n\n  if (account) {\n    return (\n      <NftProvider>\n        <Page>\n          <StyledHero>\n            <Heading as=\"h1\" size=\"xl\" color=\"#9f0d0d\" mb=\"24px\">\n              My Legendary Collection\n            </Heading>\n            <CustomButton onClick={() => history.push(`my-collection`)} mt=\"24px\">\n              Base and Rare NFTs\n            </CustomButton>\n            <CustomButton variant=\"subtle\" onClick={() => history.push(`my-epic-collection`)} mt=\"24px\">\n              Epic NFTs\n            </CustomButton>\n            <GoldenButton onClick={() => history.push(`my-legendary-collection`)} mt=\"24px\">\n              Legendary NFTs\n            </GoldenButton>\n          </StyledHero>\n          <NftInfo />\n          <NftList />\n        </Page>\n      </NftProvider>\n    )\n  }\n\n  return (\n    <Page>\n      <StyledNotFound>\n        <LogoIcon width=\"64px\" mb=\"8px\" />\n        <Text mb=\"16px\">{TranslateString(999, 'Empty Collection')}</Text>\n      </StyledNotFound>\n    </Page>\n  )\n}\n\nexport default Nft\n"],"sourceRoot":""}